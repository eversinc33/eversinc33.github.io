<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on eversinc33</title><link>https://eversinc33.github.io/posts/</link><description>Recent content in Posts on eversinc33</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 18 Mar 2023 18:49:31 +0200</lastBuildDate><atom:link href="https://eversinc33.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Abusing the GPU for Malware with OpenCL</title><link>https://eversinc33.github.io/posts/gpu-malware/</link><pubDate>Sat, 18 Mar 2023 18:49:31 +0200</pubDate><guid>https://eversinc33.github.io/posts/gpu-malware/</guid><description>I like esoteric programming topics, such as outsider languages or using obscure techniques to achieve some sort of goal. However, dabbling into these topics is usually somehow a waste of time, if theres no real-world use to it. With malware development however, weird approaches to problems can be very beneficial, as they may aid in evasion. One of these topics which I always had on my list to get into, was abusing the GPU for malware.</description></item><item><title>Windows Access Tokens: Getting SYSTEM and demystifying Potato Exploits</title><link>https://eversinc33.github.io/posts/windows-access-tokens/</link><pubDate>Fri, 25 Nov 2022 15:50:49 +0200</pubDate><guid>https://eversinc33.github.io/posts/windows-access-tokens/</guid><description>If you are a penetration tester, you probably dealt with and abused windows access tokens before, e.g. to get SYSTEM privileges, using some kind of potato, from an account with the SeImpersonate privilege set, when using meterpreter&amp;rsquo;s incognito module or when using Cobalt Strike&amp;rsquo;s make_token or revert2self. In the MITRE ATT&amp;amp;CK framework we can find T1134: Access Token Manipulation as a technique, used by many different threat actors.
Although often using tokens and knowing that there are primary and impersonation access tokens, I did not know much about how tokens actually work.</description></item><item><title>Avoiding direct syscall instructions by using trampolines</title><link>https://eversinc33.github.io/posts/avoiding-direct-syscall-instructions/</link><pubDate>Tue, 30 Aug 2022 16:16:31 +0200</pubDate><guid>https://eversinc33.github.io/posts/avoiding-direct-syscall-instructions/</guid><description>Recently, in order to prepare for an internal penetration testing engagement, I wanted to automate my payload generation. In order to do so, I created a packer for executables and shellcodes called MATROJKA. Since I&amp;rsquo;ve been a fan of Nim for malware development for some time, the choice to write my packer in Nim was an easy one. Nim has a beautiful syntax, transpiles to C, has great C and C++ (yes, real C++) integrations and is overall very fun to write in.</description></item><item><title>Getting started with the Sliver C2 Framework</title><link>https://eversinc33.github.io/posts/getting-started-with-sliver/</link><pubDate>Mon, 29 Aug 2022 21:37:49 +0200</pubDate><guid>https://eversinc33.github.io/posts/getting-started-with-sliver/</guid><description>Sliver is an open-source multi-operator command and control framework written in Go and named after a species from Magic the Gathering. It is maintained by BishopFox and offers a big feature set and a beautiful CLI.
However, I did not find much documentation on the more advanced features, except for Slivers help menu (which is excellent by the way), which is why I documented some of its features in this post.</description></item></channel></rss>